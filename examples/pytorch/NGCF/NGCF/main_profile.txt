Timer unit: 1e-06 s

Total time: 518.634 s
File: main.py
Function: main at line 9

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     9                                           @profile
    10                                           def main(args):
    11                                               # Step 1: Prepare graph data and device ================================================================= #
    12         1      33738.0  33738.0      0.0      if args.gpu >= 0 and torch.cuda.is_available():
    13         1          7.0      7.0      0.0          device = 'cuda:{}'.format(args.gpu)
    14                                               else:
    15                                                   device = 'cpu'
    16                                           
    17         1          3.0      3.0      0.0      g=data_generator.g
    18         1     242322.0 242322.0      0.0      g=g.to(device)
    19                                           
    20                                               # Step 2: Create model and training components=========================================================== #
    21         1         56.0     56.0      0.0      args.mess_dropout = eval(args.mess_dropout)
    22         1         16.0     16.0      0.0      args.layer_size = eval(args.layer_size)
    23         1         14.0     14.0      0.0      lmbd = eval(args.regs)[0]
    24         1    2010977.0 2010977.0      0.4      model = NGCF(g, args.embed_size, args.layer_size, args.mess_dropout, lmbd).to(device)
    25         1        491.0    491.0      0.0      optimizer = optim.Adam(model.parameters(), lr=args.lr)
    26                                           
    27                                               # Step 3: training epoches ============================================================================== #
    28         1          8.0      8.0      0.0      t0 = time()
    29         1          2.0      2.0      0.0      cur_best_pre_0, stopping_step = 0, 0
    30         1          2.0      2.0      0.0      loss_loger, pre_loger, rec_loger, ndcg_loger, hit_loger = [], [], [], [], []
    31         2         10.0      5.0      0.0      for epoch in range(args.epoch):
    32         1          2.0      2.0      0.0          t1 = time()
    33         1          2.0      2.0      0.0          loss, mf_loss, emb_loss = 0., 0., 0.
    34         1         12.0     12.0      0.0          n_batch = data_generator.n_train // args.batch_size + 1
    35                                           
    36       793       1948.0      2.5      0.0          for idx in range(n_batch):
    37       792   36970843.0  46680.4      7.1              users, pos_items, neg_items = data_generator.sample()
    38       792       2806.0      3.5      0.0              u_g_embeddings, pos_i_g_embeddings, neg_i_g_embeddings = model(g, 'user', 'item', users,
    39       792       1559.0      2.0      0.0                                                                             pos_items,
    40       792  207829379.0 262410.8     40.1                                                                             neg_items)
    41                                           
    42       792       3822.0      4.8      0.0              batch_loss, batch_mf_loss, batch_emb_loss = model.create_bpr_loss(u_g_embeddings,
    43       792       1609.0      2.0      0.0                                                                                pos_i_g_embeddings,
    44       792     560553.0    707.8      0.1                                                                                neg_i_g_embeddings)
    45       792     233920.0    295.4      0.0              optimizer.zero_grad()
    46       792  172198445.0 217422.3     33.2              batch_loss.backward()
    47       792    3082224.0   3891.7      0.6              optimizer.step()
    48                                           
    49       792      26372.0     33.3      0.0              loss += batch_loss
    50       792      16730.0     21.1      0.0              mf_loss += batch_mf_loss
    51       792      16117.0     20.3      0.0              emb_loss += batch_emb_loss
    52                                           
    53         1          3.0      3.0      0.0          if (epoch + 1) % 1 != 0:
    54                                                       if args.verbose > 0 and epoch % args.verbose == 0:
    55                                                           perf_str = 'Epoch %d [%.1fs]: train==[%.5f=%.5f + %.5f]' % (
    56                                                               epoch, time() - t1, loss, mf_loss, emb_loss)
    57                                                           print(perf_str)
    58                                                       continue
    59                                           
    60                                                   #evaluate the model every 10 epoches
    61         1         15.0     15.0      0.0          t2 = time()
    62         1       3635.0   3635.0      0.0          users_to_test = list(data_generator.test_set.keys())
    63         1   95333786.0 95333786.0     18.4          ret = test(model, g, users_to_test)
    64         1         13.0     13.0      0.0          t3 = time()
    65                                           
    66         1         14.0     14.0      0.0          loss_loger.append(loss)
    67         1          2.0      2.0      0.0          rec_loger.append(ret['recall'])
    68         1          2.0      2.0      0.0          pre_loger.append(ret['precision'])
    69         1          2.0      2.0      0.0          ndcg_loger.append(ret['ndcg'])
    70         1          2.0      2.0      0.0          hit_loger.append(ret['hit_ratio'])
    71                                           
    72         1          9.0      9.0      0.0          if args.verbose > 0:
    73         1          5.0      5.0      0.0              perf_str = 'Epoch %d [%.1fs + %.1fs]: train==[%.5f=%.5f + %.5f], recall=[%.5f, %.5f], ' \
    74                                                                  'precision=[%.5f, %.5f], hit=[%.5f, %.5f], ndcg=[%.5f, %.5f]' % \
    75         1          7.0      7.0      0.0                         (epoch, t2 - t1, t3 - t2, loss, mf_loss, emb_loss, ret['recall'][0], ret['recall'][-1],
    76         1          4.0      4.0      0.0                          ret['precision'][0], ret['precision'][-1], ret['hit_ratio'][0], ret['hit_ratio'][-1],
    77         1        700.0    700.0      0.0                          ret['ndcg'][0], ret['ndcg'][-1])
    78         1        103.0    103.0      0.0              print(perf_str)
    79                                           
    80         1          3.0      3.0      0.0          cur_best_pre_0, stopping_step, should_stop = early_stopping(ret['recall'][0], cur_best_pre_0,
    81         1         31.0     31.0      0.0                                                                      stopping_step, expected_order='acc', flag_step=5)
    82                                           
    83                                                   # early stop
    84         1          2.0      2.0      0.0          if should_stop == True:
    85                                                       break
    86                                           
    87         1         12.0     12.0      0.0          if ret['recall'][0] == cur_best_pre_0 and args.save_flag == 1:
    88         1      61595.0  61595.0      0.0              torch.save(model.state_dict(), args.weights_path + args.model_name)
    89         1         63.0     63.0      0.0              print('save the weights in path: ', args.weights_path + args.model_name)
    90                                           
    91         1         34.0     34.0      0.0      recs = np.array(rec_loger)
    92         1          7.0      7.0      0.0      pres = np.array(pre_loger)
    93         1          6.0      6.0      0.0      ndcgs = np.array(ndcg_loger)
    94         1          6.0      6.0      0.0      hit = np.array(hit_loger)
    95                                           
    96         1         22.0     22.0      0.0      best_rec_0 = max(recs[:, 0])
    97         1         24.0     24.0      0.0      idx = list(recs[:, 0]).index(best_rec_0)
    98                                           
    99         1         10.0     10.0      0.0      final_perf = "Best Iter=[%d]@[%.1f]\trecall=[%s], precision=[%s], hit=[%s], ndcg=[%s]" % \
   100         1         53.0     53.0      0.0                   (idx, time() - t0, '\t'.join(['%.5f' % r for r in recs[idx]]),
   101         1         15.0     15.0      0.0                    '\t'.join(['%.5f' % r for r in pres[idx]]),
   102         1         12.0     12.0      0.0                    '\t'.join(['%.5f' % r for r in hit[idx]]),
   103         1         16.0     16.0      0.0                    '\t'.join(['%.5f' % r for r in ndcgs[idx]]))
   104         1         29.0     29.0      0.0      print(final_perf)

