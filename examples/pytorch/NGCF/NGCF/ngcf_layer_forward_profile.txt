Timer unit: 1e-06 s

Total time: 2.64532 s
File: /home/ubuntu/NGCF-pytorch/NGCF-PyTorch/NGCF/model.py
Function: forward at line 28

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    28                                               @profile
    29                                               def forward(self, g, feat_dict):
    30                                           
    31        21         38.0      1.8      0.0          funcs = {} #message and reduce functions dict
    32                                                   #for each type of edges, compute messages and reduce them all
    33       105        225.0      2.1      0.0          for srctype, etype, dsttype in g.canonical_etypes:
    34        84         77.0      0.9      0.0              if srctype == dsttype: #for self loops
    35        42     238596.0   5680.9      9.0                  messages = self.W1(feat_dict[srctype])
    36        42       5369.0    127.8      0.2                  g.nodes[srctype].data[etype] = messages   #store in ndata
    37        42        534.0     12.7      0.0                  funcs[etype] = (fn.copy_u(etype, 'm'), fn.sum('m', 'h'))  #define message and reduce functions
    38                                                       else:
    39        42      22179.0    528.1      0.8                  src, dst = g.edges(etype=etype)
    40        42     159524.0   3798.2      6.0                  dst_degree = g.in_degrees(dst, etype=etype).float() #obtain degrees
    41        42    1159814.0  27614.6     43.8                  src_degree = g.out_degrees(src, etype=etype).float()
    42        42       6920.0    164.8      0.3                  norm = torch.pow(src_degree * dst_degree, -0.5).unsqueeze(1) #compute norm
    43        42     889405.0  21176.3     33.6                  messages = norm * (self.W1(feat_dict[srctype][src]) + self.W2(feat_dict[srctype][src]*feat_dict[dsttype][dst])) #compute messages
    44        42       4762.0    113.4      0.2                  g.edges[etype].data[etype] = messages  #store in edata
    45        42        406.0      9.7      0.0                  funcs[etype] = (fn.copy_e(etype, 'm'), fn.sum('m', 'h'))  #define message and reduce functions
    46                                           
    47        21     127301.0   6062.0      4.8          g.multi_update_all(funcs, 'sum') #update all, reduce by first type-wisely then across different types
    48        21         37.0      1.8      0.0          feature_dict={}
    49        63         88.0      1.4      0.0          for ntype in g.ntypes:
    50        42       6598.0    157.1      0.2              h = self.leaky_relu(g.nodes[ntype].data['h']) #leaky relu
    51        42       6905.0    164.4      0.3              h = self.dropout(h) #dropout
    52        42      16464.0    392.0      0.6              h = F.normalize(h,dim=1,p=2) #l2 normalize
    53        42         65.0      1.5      0.0              feature_dict[ntype] = h
    54        21         15.0      0.7      0.0          return feature_dict

